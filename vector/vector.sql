-- Vector search extension and tables for Lexvion Hub

-- Ensure the pgvector extension is installed
create extension if not exists vector;

-- Embeddings table; stores highâ€‘dimensional vectors per project and namespace
create table if not exists public.vector_embeddings (
  id bigint generated by default as identity primary key,
  project_id uuid not null references public.projects(id) on delete cascade,
  ns text not null,
  embedding_id text not null,
  content text,
  embedding vector(1536),
  meta jsonb,
  created_at timestamptz default now(),
  unique(project_id, ns, embedding_id)
);

-- Create an index for fast vector search using ivfflat (cosine distance)
create index if not exists idx_vector_embeddings on public.vector_embeddings using ivfflat (embedding vector_cosine_ops) with (lists = 100);

-- Upsert function: inserts or updates an embedding record
create or replace function public.upsert_embedding(
  _project_id uuid,
  _ns text,
  _id text,
  _content text,
  _embedding vector,
  _meta jsonb
) returns void
language sql security invoker as $$
  insert into public.vector_embeddings (project_id, ns, embedding_id, content, embedding, meta)
  values (_project_id, _ns, _id, _content, _embedding, _meta)
  on conflict (project_id, ns, embedding_id) do update
    set content = excluded.content,
        embedding = excluded.embedding,
        meta = excluded.meta;
$$;

-- Search function: returns nearest vectors in the same project and namespace
create or replace function public.search_embedding(
  _project_id uuid,
  _ns text,
  _query_embedding vector,
  _top_k integer
) returns table(id text, content text, score float)
language sql stable security invoker as $$
  select ve.embedding_id as id,
         ve.content as content,
         1 - (ve.embedding <=> _query_embedding) as score
  from public.vector_embeddings ve
  where ve.project_id = _project_id and ve.ns = _ns
  order by ve.embedding <-> _query_embedding
  limit _top_k;
$$;
